# docker-compose.yml
version: '3.8'

services:
  # Aplicação 1 (Python)
  app1:
    build: 
      context: ../apps/app1-python
    restart: unless-stopped
    environment:
      - PORT=5000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/texto"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Aplicação 2 (Node.js)
  app2:
    build: 
      context: ../apps/app2-node
    restart: unless-stopped
    environment:
      - PORT=3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/texto"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # NGINX para roteamento e caching
  nginx:
    image: nginx:1.21-alpine
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-cache:/var/cache/nginx
    ports:
      - "8080:80"
    depends_on:
      - app1
      - app2
    networks:
      - app-network

  # Node Exporter para métricas do host
  node-exporter:
    image: prom/node-exporter:latest
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
    networks:
      - app-network

  # NGINX Prometheus Exporter
  nginx-exporter:
    build:
      context: ./nginx-exporter
    restart: unless-stopped
    depends_on: 
      - nginx
    networks:
      - app-network

  # Prometheus para coleta de métricas
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    depends_on:
      - app1
      - app2
      - nginx
      - node-exporter
    networks:
      - app-network

  # Grafana para visualização de métricas
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - app-network

volumes:
  nginx-cache:
  prometheus-data:
  grafana-data:

networks:
  app-network:
    driver: bridge