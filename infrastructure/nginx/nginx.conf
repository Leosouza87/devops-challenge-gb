# nginx.conf
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Configurações de log
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '"$request_time" "$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    sendfile on;
    keepalive_timeout 65;
    
    # Configurações de cache
    proxy_cache_path /var/cache/nginx/app1_cache levels=1:2 keys_zone=app1_cache:10m max_size=100m inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/app2_cache levels=1:2 keys_zone=app2_cache:10m max_size=100m inactive=60m use_temp_path=off;
    
    # Headers para depuração de cache
    add_header X-Cache-Status $upstream_cache_status;
    
    # Configurações de upstream
    upstream app1 {
        server app1:5000;
    }
    
    upstream app2 {
        server app2:3000;
    }
    
    # Servidor para App 1 (Python)
    server {
        listen 80;
        server_name app1.local;
        
        location /metrics {
            proxy_pass http://app1/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            # Sem cache para métricas
        }
        
        location /texto {
            proxy_pass http://app1/texto;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            
            # Cache de 10 segundos
            proxy_cache app1_cache;
            proxy_cache_valid 200 10s;
            proxy_cache_key $scheme$proxy_host$request_uri;
        }
        
        location /horario {
            proxy_pass http://app1/horario;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            
            # Cache de 10 segundos
            proxy_cache app1_cache;
            proxy_cache_valid 200 10s;
            proxy_cache_key $scheme$proxy_host$request_uri;
        }
    }
    
    # Servidor para App 2 (Node.js)
    server {
        listen 80;
        server_name app2.local;
        
        location /metrics {
            proxy_pass http://app2/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            # Sem cache para métricas
        }
        
        location /texto {
            proxy_pass http://app2/texto;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            
            # Cache de 60 segundos
            proxy_cache app2_cache;
            proxy_cache_valid 200 60s;
            proxy_cache_key $scheme$proxy_host$request_uri;
        }
        
        location /horario {
            proxy_pass http://app2/horario;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            
            # Cache de 60 segundos
            proxy_cache app2_cache;
            proxy_cache_valid 200 60s;
            proxy_cache_key $scheme$proxy_host$request_uri;
        }
    }
    
    # Servidor padrão para o proxy reverso
    server {
        listen 80 default_server;
        server_name _;
        
        location / {
            return 404;
        }
        
        # Expor métricas do NGINX para Prometheus
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;
            deny all;
        }
    }
}